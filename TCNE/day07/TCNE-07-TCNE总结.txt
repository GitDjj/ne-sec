
技术，都是为问题而生。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

网络的作用：
      设备互通。
网络设备的制造模型：
      OSI
	    -封装
		-解封装

拍错思路： (数据的转发思路)

   产生数据 --- 传输数据   ---- 接收数据
    (封装)        [R/S]           [解封装]
--------------------------------------------------------------

传输网络：
   交换：相同IP地址的设备通信过程；
     @交换机
	    @MAC地址表 
		   1.成表
		       -关注的源MAC与数据的入接口
		   2.查表
		       -关注的是目标MAC地址，
			       @查到，对应接口发送出去；
				   @查不到，广播
		@想隔离广播域：
		    vlan 
			   -创建vlan
			   -配置接口并放入接口
			       *access
				   *trunk 
				   *hybrid
		@vlan之间路由
		    -网关(具有路由功能的设备)
			
    @单点故障：
        #增加备份设备/线路
            -环路 
              ** STP/RSTP/MSTP
                   &确定交换机角色
				       根交换机/非根交换机
					   原则： 
					      BID(优先级+MAC)
                   &确定端口角色	
				       1.根端口：非根交换机，有且只有1个；
					   2.指定端口：每个线路上，有且只有1个；
					   3.非指定端口
					        -备份端口
							-替代端口
                   &确定端口状态
                       1.disable
                       2.侦听
                       3.学习
                       4.转发
                       5.阻塞					   
			                        [discarding/learning/forwarding]
-----------------------------------------------------------------		 
   路由：不同IP地址的设备通信过程；
      @路由器
	     #路由表
		    -路由条目，类型：
			    *直连
				*静态
				*RIP/OSPF/ISIS/BGP
		    -路由条目，属性： 
			    1.优先级:100/ 10|150 / 15  /  255 【越小越好】
				2.开销值:                         【越小越好】
				
    @单点故障：
        #增加备份设备/线路
           1.VRRP 
		       -同网段，多个路由设备，才有必要运行VRRP
			   -角色： 
			      主网关   - 转发终端用户设备发送的数据
				  备份网关 - 监听主网关设备
				  虚拟网关 - 给终端用户设备
			   -选举原则：
			      1.优先级[越大越好]
				  2.IP地址[越大越好]
			   -角色维持：
			      1.主网关周期性的发送 VRRP 报文，周期时间为1s;
				  2.备份网关一直监听VRRP的报文，如果3s收不到VRRP，
				    则判定主网关出问题，直接升级为主网关
			      3.如果原先的主网关修复完成，则又再次成功
				    “抢占”回“master”的身份；
			   -特性： 
			      1.链路跟踪
				  2.VRRP 启用认证
           2.浮动路由		   

-----------------------------------------------------------------

控制流量： 
    ACL - access control list 
	  @类型： 
	     基本ACL：只能查看源IP地址
		 高级ACL：可以查看源\目标\协议\源端口\目标端口；
	  @特点： 
	     1.acl创建之后，必须得被其他工具调用； 
		 2.acl 最后有1个默认的规则： 
		     @拒绝所有；
			 @特殊情况： 
			    当 acl 与traffic-filter 结合使用的时候，默认是
				允许所有；
	     3.ACL 对设备自己产生的流量的，不起作用；

---------------------------------------------------------------------

内网与公网互通：（内可以到外；外也可以进入内） 
    NAT： 
	   network  address translation 
	     [私有--公有]

      @核心工作表： 
	      NAT 转换表
	  @NAT类型： 
	     动态NAT - 实现内到外的访问； 
		    缺点： 
			   不节省IP地址；[私:公 = 1:1]
			   外网不能访问内网；
		 静态NAT - 实现外网可以访问内网；
            缺点： 
			   不节省IP地址；[私:公 = 1:1]

         PAT/PNAT/NAPT: Port NAT 
		     -本质： 
			    将私有地址转换成公有地址的时候，
				可以实现多对1的转换，
				我们是通过在公网地址上，利用不同的端口号
				来区分内网的不同的私有地址主机；
			-动态PNAT
			    1.动态的PNAT
				2.Easy IP 
			-静态PNAT
			    1.nat server [端口映射]

--------------------------------------------------------------

网络规模扩大：

   OSPF ：
      -内部网关协议，公有标准，属于OSI第三层，协议号是89
	   报文转发方式： 224.0.0.5/6 
	  -工作原理： 
	     1.建立邻居表：很多建立邻居的影响因素；
		 2.同步数据库：各种类型的LSA
		    1 - 自我介绍；
			2 - DR可以产生
			3 - 只有ABR可以产生，表示不同区域之间的路由； 
			4 - 与ASBR在同一个区域的ABR产生的，
			5 - 只有 ASBR 可以产生，表示 OSPF 外部路由
			    (传输过程中，不会变化，可以传输到OSPF整个网络)
			7
		
		 3.计算路由表
      -OSPF报文： 
	     1.hello 
		 2.DD
		 3.LSR
		 4.LSU
		 5.LSAck

      -OSPF 路由类型： 
	      1.network 方式产生的路由，叫做内部路由；
		  2.import-route 方式产生的路由，叫做外部路由；

     -OSPF 特殊区域： 
	     1.stub 
		    YES- 1/2/3
			NO - 4/5
		 2.totally stub 
		    YES-1/2/3*
			NO - 3/4/5
		 3.nssa
		    YES- 1/2/3/7
			NO - 4/5		 
		 4.totally nssa 
		    YES-1/2/7/3*
			NO - 3/4/5
        注意： 
		   骨干区域不能配置为特殊区域； 

	 -OSPF 汇总：
       #类型：	 
        @3类LSA
        @5/7类LSA		
	   #作用 
        1.节省资源
        2.增强网络稳定性
      -OSPF 虚链路
        1.连接非骨干区域到骨干区域
        2.将被分割的骨干区域重新连接起来；			   
-------------------------------------------------------------------





	
	
	
	
	
	
	
	
	

















































































